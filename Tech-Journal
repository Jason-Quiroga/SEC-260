2/20/21

I. Creating a CA
***Make sure openssl is downloaded on both servers
  A. File system prep
    1. "cd /etc/pki/CA" --> Navigate to the /etc/pki/CA directory in the server
    2. "touch index.txt" --> Creates the file "index.txt" and makes it include time stamps when editted.
    3. "echo 1000 > serial" --> Used to assign serial numbers to certifications
  B. Creating your CA's private key
    1. "openssl genrsa -des3 -out private/cakey.pem 2048"
      a. openssl --> Uses commands from openssl
      b. genrsa --> Generates an RSA private key
      c. -des3 --> Encrypt using triple DES encryption
      d. -out private/cakey.pem --> Specifies the file to write the key to
      e. 2048 --> What key encryption to use
     2. Record what pass phrase you use (mine was "passphrase")
  C. Create your CA
    1. "openssl req -new -x509 -days 365 -key private/cakey.pem -out cacert.pem"
      a. openssl --> Use openssl commands
      b. req --> Request a new certificate
      c. -new --> a new one...
      d. -x509 --> x509 type certificate
      e. -days 365 --> How many days the certificate is for
      f. -key private/cakey.pem --> What key to use
      g. -out cacert.pem --> Where to output the certificate to
    2. Fill out what it asks you, and for Organization Name, Organization Unit Name, and Common Name, put Skiff101
II. Create the Certificate Request on your Web Server
  A. Generate a private key for the web server and a certificate request file
    1. Log on to your webserver
    2. "openssl req -newkey rsa:2048 -keyout websrv.key -out websrv.csr"
      a. openssl --> Use openssl
      b. req -newkey rsa:2048 --> Request a new key using 2048 key encryption
      c. -keyout websrv.key --> Where to store the private key
      d. -out websrv.csr --> Where to store the Certificate request
    3. Make sure you remember the password you set (mine was "passphrase")
    4. Fill out all of the boxes with what you answered for the first time you did this, but you don't need the extra attributes
    5. SCP the csr file to the CA using "scp websrv.csr root@192.168.1.35:/etc/pki/CA" and using the root's password (123456)
      a. Copy the file "websrv.csr" from the local host to the remote host "192.168.1.35" to the directory "/etc/pki/CA".
III. Sign the Certificate on the Certificate Authority
  A. On the CA
    1. "openssl ca -out websrv.crt -infiles websrv.csr"
      a. openssl --> use openssl
      b. ca --> Create a Certificate
      c. -out websrv.crt --> Output the certification to websrv.crt
      d. -infiles websrv.csr --> Use websrv.csr as the input for the fields
    2. Input the passphrase for the CA (passphrase)
    3. Agree to everything
    4. SCP the file back using "scp websrv.crt root@192.168.1.41:"



I. Telnet
  A. How to connect to a server using telnet
    1. Enter Linux server (webserver)
    2. Use the command "telnet [ipaddress] 80" to connect (telnet 192.168.1.41 80)
    3. It will bring up a blank command prompt thing
    4. Type in the command "GET [location] HTTP/1.1", and then press etner and 
       in the next line type "Host: [ipaddress]", then press enter twice
       I. For example, I did "GET /index.html HTTP/1.1", then "Host: 192.168.1.41", then enter twice and it brought up the HTML code for my page.
II. 


Class Notes
I. HTTP
  A. TCP
    1. In TCP, you need the IP address of the server computer and the TCP port number associated with the specific software program running on the server.
  B. Web Resources
    1. Static file on the web server's file system can contain anything: Text, HTML files, microsoft word files, etc.
    2. Dynamic content resources can generate content, for example: Based on your identity, time of day, live image from camera, etc.
  C. URI --> Can retrieve an object from a server
  D. URL
    1. Tells precisely where a resource is located and how to access it.
    2. Example: http://www.joeshardware.com/specials
      a. "http://" --> Use HTTP protocol
      b. "www.joeshardware.com" --> Go to joeshardware.com
      c. "/specials" --> Grab the resource called /specials
    3. The first part of the URL is called the scheme, and it describes the protocol used to access the resource (usually the HTTP protocol)
    4. The second part gives the server internet address (www.joeshardware.com)
    5. The rest names a resource on the web server (/special)
    6. Today, almost every URI is a URL
  E. Relative Paths
    1. Only point to a file or a file path
      a. index.html
      b. /graphics/image.png
    2. When a user clicks  arelative link, the browser takes them to that location on the current site
    3. <a href="linkhere.html">Click Me</a>
  F. Absolute Paths
    1. Hard coded, long form, no shortcut path to a resource
    2. Always include the domain name of the website, including http://
      a. http://www.mysite.com
      b. http://www.mysite.com/graphics/image.png
    3. If we had a site called http://www.website.com and a subfolder called pictures and inside pictures is pictures.html, the URL would be:
      a. http://www.website.com/pictures/pictures.html
      b. And in this pictures.html file, we have a link
        1. <a href="morepictures.html">More Pictures</a>
      c. Which would go to httpL//www.website.com/pictures/morepictures.html

1/28/21

I. Web Page
  A. Static Web Pages are text files containing HTML
    1. HTML --> Hyper Text Markup Language
  B. HTML is the most basic bulding block of the Web. It describes and defines the content of the webpage.
    1. Hypertext refers to links that connect webpages to one another
    2. Markup means to annotate text, images, and other content for display in a web browser.
      a. Markup includes special elements, such as <head>, <title>, <body>, etc.
    3. Basic html always has an opening and a closing
      a. IE. <html> </html>
      a. <html> --> oepning tag for document
      b. <head> --> section not displayed but contains info for the browser
      c. <title> --> The name of the page that is printed on the tab THIS IS WHERE THE TITLE GOES
      d. </title> --> close title
      e. </head> close head
      f. <body> --> Contains what is displayed in the browser
      g. </body> close body
      h. </html> close html, end of document
    4. HTML is comprised of elements and tags
      a. Begins with <html> and ends with </html>
    5. Elements (tags) are nested one inside another: <html> <head> </head> <body> </body> </html>
    6. Tags have attributes: <img src="logo.jpg" alt="logo"/> *Note that the close is INSIDE of the tag for image tags
    7. HTML source code should be formatted to increase readability and facilitate debugging
    8. HTML EXAMPLE:
    
<!DOCTYPE HTML>
<html>
  <head>
    <title>My First HTML Page</title>
  </head>
  <body>
    <p>This is some text...</p>
  </body>
</html>

  C. Simple Tags
    1. Hyperlink Tags
      a. <a href="httpL//www.google.com/"
            title="Google"> Link to Google</a>
    2. Image Tags
      a. <img src
    3. Text formatting tags
      a. <strong> Bold </strong> <em> ITALIC </em>
  D. Headings and Paragraphs
    1. Heading Tags (h1 - h6)
      a. <h1>Heading 1</h1>
    2. Paragraph Tags
      a. <p>This is my first paragraph</p>
    3. Sections: div and span
      a. <div style="background:blue" This is a div</div>
  E. Using VI
    1. Unix-based text editor
    2. **Help sheet posted in a lab
    3. Default editor used in most Linux installs
    4. Two modes - look at the bottom left to see your mode:
      a. INSERT: type "i" and you can edit the file, use arrow keys to navigate
      b. COMMAND: Hit esc key and then ":" to enter commands
        I. :w writes (saves) file
        II. :wq writes and quits file
        III. :q! quits without saving
        
        
        
HOW TO CONNECT TO THE CYBER.LOCAL SERVER:
1. Login to Remote Student VDI
2. Open Chrome
3. Enter the link "https://vcenter01.cyber.local"
4. Navigate to your systems

SKIFF100-15.CYBER.LOCAL --> Skiff PC

***Use the command "dhclient" to make your server run properly again.

My Network Assignment:
WAN/24: 10.0.17.107
